/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_recordplaintext_free(a: number): void;
export function recordplaintext_fromString(a: number, b: number, c: number): void;
export function recordplaintext_toString(a: number, b: number): void;
export function recordplaintext_microcredits(a: number): number;
export function recordplaintext_serialNumberString(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function programmanager_deploy(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number): number;
export function programmanager_estimateDeploymentFee(a: number, b: number, c: number, d: number, e: number): number;
export function programmanager_estimateProgramNameCost(a: number, b: number, c: number, d: number): void;
export function programmanager_execute_local(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number): void;
export function programmanager_execute(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number, o: number, p: number, q: number): number;
export function programmanager_estimateExecutionFee(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number): number;
export function programmanager_estimateFinalizeFee(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function __wbg_transaction_free(a: number): void;
export function transaction_fromString(a: number, b: number, c: number): void;
export function transaction_toString(a: number, b: number): void;
export function transaction_transactionId(a: number, b: number): void;
export function transaction_transactionType(a: number, b: number): void;
export function programmanager_transfer(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number, o: number, p: number, q: number): number;
export function __wbg_programmanager_free(a: number): void;
export function programmanager_new(): number;
export function programmanager_cacheKeypairInWasmMemory(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function programmanager_getCachedKeypair(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function programmanager_synthesizeKeypair(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function programmanager_clearKeyCache(a: number): void;
export function programmanager_keyExists(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function __wbg_provingkey_free(a: number): void;
export function provingkey_fromBytes(a: number, b: number, c: number): void;
export function provingkey_toBytes(a: number, b: number): void;
export function __wbg_verifyingkey_free(a: number): void;
export function verifyingkey_fromBytes(a: number, b: number, c: number): void;
export function verifyingkey_toBytes(a: number, b: number): void;
export function __wbg_address_free(a: number): void;
export function address_from_private_key(a: number): number;
export function address_from_view_key(a: number): number;
export function address_from_string(a: number, b: number): number;
export function address_verify(a: number, b: number, c: number, d: number): number;
export function address_to_x_coordinate(a: number, b: number): void;
export function address_from_bytes(a: number, b: number): number;
export function address_to_affine(a: number, b: number): void;
export function address_to_group(a: number, b: number): void;
export function address_add_fields(a: number, b: number, c: number, d: number, e: number): void;
export function address_sub_fields(a: number, b: number, c: number, d: number, e: number): void;
export function address_invert_field(a: number, b: number, c: number): void;
export function address_double_field(a: number, b: number, c: number): void;
export function address_mul_fields(a: number, b: number, c: number, d: number, e: number): void;
export function address_pow_field(a: number, b: number, c: number, d: number, e: number): void;
export function address_poseidon_hash(a: number, b: number, c: number): void;
export function address_sqrt(a: number, b: number, c: number): void;
export function address_add_points(a: number, b: number, c: number, d: number, e: number): void;
export function address_group_scalar_mul(a: number, b: number, c: number, d: number, e: number): void;
export function address_msm(a: number, b: number, c: number): void;
export function address_ntt(a: number): number;
export function address_get_random_dense_polynomial(a: number): number;
export function address_to_string(a: number, b: number): void;
export function address_to_projective(a: number, b: number): void;
export function programmanager_join(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number): number;
export function __wbg_signature_free(a: number): void;
export function signature_sign(a: number, b: number, c: number): number;
export function signature_verify(a: number, b: number, c: number, d: number): number;
export function signature_from_string(a: number, b: number): number;
export function signature_to_string(a: number, b: number): void;
export function __wbg_executionresponse_free(a: number): void;
export function executionresponse_getOutputs(a: number): number;
export function programmanager_split(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): number;
export function __wbg_viewkey_free(a: number): void;
export function viewkey_from_private_key(a: number): number;
export function viewkey_from_string(a: number, b: number): number;
export function viewkey_to_string(a: number, b: number): void;
export function viewkey_to_address(a: number): number;
export function viewkey_decrypt(a: number, b: number, c: number, d: number): void;
export function viewkey_to_scalar(a: number, b: number): void;
export function viewkey_view_key_ciphertext_multiply(a: number, b: number, c: number, d: number): void;
export function __wbg_program_free(a: number): void;
export function program_fromString(a: number, b: number, c: number): void;
export function program_toString(a: number, b: number): void;
export function program_getFunctions(a: number): number;
export function program_getFunctionInputs(a: number, b: number, c: number, d: number): void;
export function program_getMappings(a: number, b: number): void;
export function program_getRecordMembers(a: number, b: number, c: number, d: number): void;
export function program_getStructMembers(a: number, b: number, c: number, d: number): void;
export function program_getCreditsProgram(): number;
export function program_id(a: number, b: number): void;
export function program_isEqual(a: number, b: number): number;
export function program_getImports(a: number): number;
export function __wbg_privatekeyciphertext_free(a: number): void;
export function privatekeyciphertext_encryptPrivateKey(a: number, b: number, c: number, d: number): void;
export function privatekeyciphertext_decryptToPrivateKey(a: number, b: number, c: number, d: number): void;
export function privatekeyciphertext_toString(a: number, b: number): void;
export function privatekeyciphertext_fromString(a: number, b: number, c: number): void;
export function __wbg_keypair_free(a: number): void;
export function keypair_new(a: number, b: number): number;
export function keypair_provingKey(a: number, b: number): void;
export function keypair_verifyingKey(a: number, b: number): void;
export function __wbg_privatekey_free(a: number): void;
export function privatekey_new(): number;
export function privatekey_from_seed_unchecked(a: number, b: number): number;
export function privatekey_from_string(a: number, b: number, c: number): void;
export function privatekey_to_string(a: number, b: number): void;
export function privatekey_to_view_key(a: number): number;
export function privatekey_to_address(a: number): number;
export function privatekey_sign(a: number, b: number, c: number): number;
export function privatekey_newEncrypted(a: number, b: number, c: number): void;
export function privatekey_toCiphertext(a: number, b: number, c: number, d: number): void;
export function privatekey_fromPrivateKeyCiphertext(a: number, b: number, c: number, d: number): void;
export function __wbg_recordciphertext_free(a: number): void;
export function recordciphertext_fromString(a: number, b: number, c: number): void;
export function recordciphertext_toString(a: number, b: number): void;
export function recordciphertext_decrypt(a: number, b: number, c: number): void;
export function recordciphertext_isOwner(a: number, b: number): number;
export function recordciphertext_get_nonce(a: number, b: number): void;
export function recordciphertext_point_scalar_mul(a: number, b: number, c: number, d: number): void;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
export const __wbindgen_export_2: WebAssembly.Table;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__ha8e79397b672ec81(a: number, b: number, c: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number, c: number): void;
export function __wbindgen_exn_store(a: number): void;
export function wasm_bindgen__convert__closures__invoke2_mut__h3b46df8b84c7f1aa(a: number, b: number, c: number, d: number): void;
