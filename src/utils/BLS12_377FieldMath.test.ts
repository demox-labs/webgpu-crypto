import { FieldMath } from "./BLS12_377FieldMath";

describe('FieldMath', () => {
  describe('multiply', () => {
    it.each([
      [
        {
          x: '8257472440026412470855823161360599835763884965512266031735196605946124540781',
          y: '1317236406994089734712440120087390006881665376441526398782786543205559959784'
        },
        '1547425874856602534767534308429521876318647158746421300258127830068083829107',
        {
          x: '280707319831642431009504151884114731107732475984662874186498832708556594042',
          y: '6780405324232516243853088596794063648880273989664802391241817504589639452676'
        }
      ],
      [
        {
          x: '4145103444972959370752799658138366514606148292573847443656295656764663256852',
          y: '8195192268960871257765559104440454785805900892679487766705407419363540677979'
        },
        '1714738424968869845390842595910648313891392225738655712285792046986013878987',
        {
          x: '2877000835025694110737495937937857548250497144965509405668304930059046899074',
          y: '1584375919144210261376433026300851516663764194894843872483164392123867734886'
        }
      ],
      [
        {
          x: '1407393795595197158321967850589923407460177064783512277145169077414223929519',
          y: '7432153702653035036383775355082339546086624529603034704124264595653244652944'
        },
        '1714738424968869845390842595910648313891392225738655712285792046986013878987',
        {
          x: '6812460234826301275802420261414545657179156735634459146286228208874069968311',
          y: '5903077177443029880600616769227903613786094864399302847410393125625806571974'
        }
      ],
      [
        {
          x: '2852308072744418503022691767087648768127882203872961492947930316205537975830',
          y: '4276917318468280744562416198969583201366895049007434396046151895529617346724'
        },
        '885681279335589295694233278030888423770570959635027694177964832914872649115',
        {
          x: '3610365899681714779827737389912654352565069132637355828354779992034131153624',
          y: '7759939422231982859892322839012756195668494835579501312737965937667499450944'
        }
      ],
      [
        {
          x: '4899983337726338278640781704713890341229795000554597192096411729290172809762',
          y: '6490912106011982932993118483094030962453896277891374577826843372689626084690'
        },
        '2096750020814833916645641418924654152172414459208956903895628626218487785794',
        {
          x: '4642589023830411184277633193203785345703779976699830339808322679184563884257',
          y: '7784411079693722795119796948076918321132943145855328972555180815499881182349'
        }
      ]
    ])
    ('should multiply nonce by scalar', (nonce: { x: string, y: string }, scalar: string, expectedResult: { x: string, y: string }) => {
      const result = new FieldMath().multiply(BigInt(nonce.x), BigInt(nonce.y), BigInt(scalar));
      expect(result.x.toString()).toBe(expectedResult.x);
      expect(result.y.toString()).toBe(expectedResult.y)
    });
  });

  describe('poseidonHash', () => {
    it.each([
      [
        '7167687997193168895541712218891525298201099745877775281726961135878581588581',
        '1592457456076054062030422305887278139576714074260839280177205953639798495723'
      ],
      [
        '2718878446006213775507095622140058096911401870098370787336046537819939715849',
        '5283189146437503863512238588598027753671665860900494121175944464262388541789'
      ],
      [
        '7594099222448368518167195437458096022154064527766426028932725284608574638254',
        '2416829232257366519210509862472712457615747633061751215904502348811732899360'
      ],
      [
        '6558481440122252448805828835339205294065814051181665913191174755363316337263',
        '4086906626720893435084186385746990434126091347808941529026380535989271143006'
      ],
      [
        '4642589023830411184277633193203785345703779976699830339808322679184563884257',
        '4549891657167028000423902745816609472826053580576226253224539968365921319690'
      ]
    ])('should return expected value', (input: string, expected: string) => {
      const inputBigInt = BigInt(input);
      const result = new FieldMath().poseidonHash(inputBigInt);
      const fastResult = new FieldMath().poseidonHashFast(inputBigInt);
      expect(result.toString()).toBe(expected);
      expect(fastResult.toString()).toBe(expected);
    });
  });

  describe('getPointFromX', () => {
    it.each([
      [
        '7277225673954309719883819123615758925677189693308296529054933534083481597875',
        '1534757228766746657952411535957375215012967279942781097930718794729416379764'
      ],
      [
        '6668401193057322520970952572257172131583278070174751616942722086839745568612',
        '2451637686636076672169141722855773330775606040023439333435865738274264590089'
      ],
      [
        '5171864189979210424267942198699979498834100132989590478023237401362416394215',
        '771623517164978762318496098769994406685190221055386234983870046878237368347'
      ],
      [
        '4073685905190079830563316481255126820231714757721080083250562600230098465667',
        '7724497955715594404046701658091914148102455176621137343342321340099935318344'
      ],
      [
        '5607146324525996389057348716233686669891151387820192320410858992272460798043',
        '7140300045010707491219668027665480921808083167278591679994462390519123119286'
      ],
      [
        '8290126653874599468882190194081316363779752818921027324794763746032839143130',
        '5650187918377417409124091323871667504886558718947019752893838402231728068795'
      ]
    ])('should return expected value', (x: string, expectedY: string) => {
      const result = new FieldMath().getPointFromX(BigInt(x));
      expect(result.y.toString()).toBe(expectedY);
    });
  });
});
