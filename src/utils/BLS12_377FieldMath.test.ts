import { aleoMdStrings, aleoRoundConstantStrings } from "../params/AleoPoseidonParams";
import { FieldMath } from "./BLS12_377FieldMath";

describe('FieldMath', () => {
  describe('multiply', () => {
    it.each([
      [
        {
          x: '8257472440026412470855823161360599835763884965512266031735196605946124540781',
          y: '1317236406994089734712440120087390006881665376441526398782786543205559959784'
        },
        '1547425874856602534767534308429521876318647158746421300258127830068083829107',
        {
          x: '280707319831642431009504151884114731107732475984662874186498832708556594042',
          y: '6780405324232516243853088596794063648880273989664802391241817504589639452676'
        }
      ],
      [
        {
          x: '4145103444972959370752799658138366514606148292573847443656295656764663256852',
          y: '8195192268960871257765559104440454785805900892679487766705407419363540677979'
        },
        '1714738424968869845390842595910648313891392225738655712285792046986013878987',
        {
          x: '2877000835025694110737495937937857548250497144965509405668304930059046899074',
          y: '1584375919144210261376433026300851516663764194894843872483164392123867734886'
        }
      ],
      [
        {
          x: '1407393795595197158321967850589923407460177064783512277145169077414223929519',
          y: '7432153702653035036383775355082339546086624529603034704124264595653244652944'
        },
        '1714738424968869845390842595910648313891392225738655712285792046986013878987',
        {
          x: '6812460234826301275802420261414545657179156735634459146286228208874069968311',
          y: '5903077177443029880600616769227903613786094864399302847410393125625806571974'
        }
      ],
      [
        {
          x: '2852308072744418503022691767087648768127882203872961492947930316205537975830',
          y: '4276917318468280744562416198969583201366895049007434396046151895529617346724'
        },
        '885681279335589295694233278030888423770570959635027694177964832914872649115',
        {
          x: '3610365899681714779827737389912654352565069132637355828354779992034131153624',
          y: '7759939422231982859892322839012756195668494835579501312737965937667499450944'
        }
      ],
      [
        {
          x: '4899983337726338278640781704713890341229795000554597192096411729290172809762',
          y: '6490912106011982932993118483094030962453896277891374577826843372689626084690'
        },
        '2096750020814833916645641418924654152172414459208956903895628626218487785794',
        {
          x: '4642589023830411184277633193203785345703779976699830339808322679184563884257',
          y: '7784411079693722795119796948076918321132943145855328972555180815499881182349'
        }
      ]
    ])
    ('should multiply nonce by scalar', (nonce: { x: string, y: string }, scalar: string, expectedResult: { x: string, y: string }) => {
      const result = new FieldMath().multiply(BigInt(nonce.x), BigInt(nonce.y), BigInt(scalar));
      expect(result.x.toString()).toBe(expectedResult.x);
      expect(result.y.toString()).toBe(expectedResult.y)
    });
  });

  describe('poseidonHash', () => {
    it.each([
      [
        '7167687997193168895541712218891525298201099745877775281726961135878581588581',
        '1592457456076054062030422305887278139576714074260839280177205953639798495723'
      ],
      [
        '2718878446006213775507095622140058096911401870098370787336046537819939715849',
        '5283189146437503863512238588598027753671665860900494121175944464262388541789'
      ],
      [
        '7594099222448368518167195437458096022154064527766426028932725284608574638254',
        '2416829232257366519210509862472712457615747633061751215904502348811732899360'
      ],
      [
        '6558481440122252448805828835339205294065814051181665913191174755363316337263',
        '4086906626720893435084186385746990434126091347808941529026380535989271143006'
      ],
      [
        '4642589023830411184277633193203785345703779976699830339808322679184563884257',
        '4549891657167028000423902745816609472826053580576226253224539968365921319690'
      ]
    ])('should return expected value', (input: string, expected: string) => {
      const inputBigInt = BigInt(input);
      const result = new FieldMath().poseidonHash(inputBigInt);
      const fastResult = new FieldMath().poseidonHashFast(inputBigInt);
      expect(result.toString()).toBe(expected);
      expect(fastResult.toString()).toBe(expected);
    });
  });

  describe('getPointFromX', () => {
    it.each([
      [
        '7277225673954309719883819123615758925677189693308296529054933534083481597875',
        '6909704520661623766296413402824171316362932055211282730004514661187992859277'
      ],
      [
        '6668401193057322520970952572257172131583278070174751616942722086839745568612',
        '2451637686636076672169141722855773330775606040023439333435865738274264590089'
      ],
      [
        '5171864189979210424267942198699979498834100132989590478023237401362416394215',
        '7672838232263391661930328840011552124690709114098677592951363409039171870694'
      ],
      [
        '4073685905190079830563316481255126820231714757721080083250562600230098465667',
        '7724497955715594404046701658091914148102455176621137343342321340099935318344'
      ],
      [
        '5607146324525996389057348716233686669891151387820192320410858992272460798043',
        '1304161704417662933029156911116065609567816167875472147940771065398286119755'
      ],
      [
        '8290126653874599468882190194081316363779752818921027324794763746032839143130',
        '5650187918377417409124091323871667504886558718947019752893838402231728068795'
      ]
    ])('should return expected value', (x: string, expectedY: string) => {
      const result = new FieldMath().getPointFromX(BigInt(x));
      expect(result.y.toString()).toBe(expectedY);
    });
  });
  describe('Poseidon', ()=>{
    it('domain separator', ()=>{
      const FM = new FieldMath();
      expect(FM.domainSeparator('AleoPoseidon2')).toStrictEqual(3995586141740408784790749539393n);
      expect(FM.domainSeparator('AleoPoseidon8')).toStrictEqual(4470955116825994810352013241409n);
    });
    it('hash: input=1', ()=>{
      const FM = new FieldMath();
      const input = [6901184695964460143517399399785179769303979738604374595034454667750561389951n];
      expect(
        FM.poseidon2.hash(input)).toStrictEqual(
        6186994423344958425708607244831355023646923213530547137175062702754527403700n
      );
      expect(
        FM.poseidon4.hash(input)).toStrictEqual(
        3914249850192425666604652570354050614847402892664422284078761778716586183676n
      );
      expect(
        FM.poseidon8.hash(input)).toStrictEqual(
        6721691233207123933207165967364883976428476445861560724767518697810330835212n
      );
      // Scalar
      expect(
        FM.poseidon2.hashScalar(input)).toStrictEqual(
        759240240345761765228717322549109343024892682328645697825488452383599451828n
      );
      expect(
        FM.poseidon4.hashScalar(input)).toStrictEqual(
        295747061526294559618059288832553494432715871863154657845712278469300882428n
      );
      expect(
        FM.poseidon8.hashScalar(input)).toStrictEqual(
        1293937050207927272727276045082638295806445914659659285417944447439402883340n
      );
      // Many
      expect(FM.poseidon2.hashMany(input, 2)).toStrictEqual([
        6186994423344958425708607244831355023646923213530547137175062702754527403700n,
        4699461786856857839050833244195318082708818702081180126445405581239214754809n,
      ]);
      expect(FM.poseidon4.hashMany(input, 2)).toStrictEqual([
        3914249850192425666604652570354050614847402892664422284078761778716586183676n,
        998515860570164355026750895215851118777776096196294356904706823235408367877n,
      ]);
      expect(FM.poseidon8.hashMany(input, 2)).toStrictEqual([
        6721691233207123933207165967364883976428476445861560724767518697810330835212n,
        8197726076913173348101400523286512392738382786755045646655411668583647336740n,
      ]);
      // Group
      expect(
        FM.pointToX(FM.poseidon2.hashGroup(input))).toStrictEqual(
        6358557795286650999281554164938699104195056946079653912265563158420808717594n
      );
      expect(
        FM.pointToX(FM.poseidon4.hashGroup(input))).toStrictEqual(
        3508536235236051405373683873016057409422340764031927249836920950857524171757n
      );
      expect(
        FM.pointToX(FM.poseidon8.hashGroup(input))).toStrictEqual(
        8020652130274109003118641577770171745547795105259738599127375415847975887630n
      );
    });
    it('hash: input=2', ()=>{
      const FM = new FieldMath();
      const input = [
        6901184695964460143517399399785179769303979738604374595034454667750561389951n,
        4569986992907167903298094880801044988451682407606958090985246015539197576880n,
      ];
      expect(
        FM.poseidon2.hash(input)).toStrictEqual(
        103425943716865137346152431339937911572438811996215452353663206824446841498n
      );
      expect(
        FM.poseidon4.hash(input)).toStrictEqual(
        1046433435170674401536444991956456134257121388178069427432563598686118393183n
      );
      expect(
        FM.poseidon8.hash(input)).toStrictEqual(
        2896477247039969809591021193279936703472476732654106387591853972588061664469n
      );
      // Scalar
      expect(
        FM.poseidon2.hashScalar(input)).toStrictEqual(
        103425943716865137346152431339937911572438811996215452353663206824446841498n
      );
      expect(
        FM.poseidon4.hashScalar(input)).toStrictEqual(
        1046433435170674401536444991956456134257121388178069427432563598686118393183n
      );
      expect(
        FM.poseidon8.hashScalar(input)).toStrictEqual(
        1087225852706904256097724552519188143265133222253472574475329222464419013845n
      );
      // Many
      expect(FM.poseidon2.hashMany(input, 2)).toStrictEqual( [
        103425943716865137346152431339937911572438811996215452353663206824446841498n,
        3545210811159819442056413892427281354557556701718002344560119017328682972521n,
      ]);
      expect(FM.poseidon4.hashMany(input, 2)).toStrictEqual( [
        1046433435170674401536444991956456134257121388178069427432563598686118393183n,
        7596042839316529415283376691429039023502673481034149774850258177826887158165n,
      ]);
      expect(FM.poseidon8.hashMany(input, 2)).toStrictEqual( [
        2896477247039969809591021193279936703472476732654106387591853972588061664469n,
        1816045235024288062679286824021674242140717796224765515425577496868628997002n,
      ]);
      // Group
      expect(
        FM.pointToX(FM.poseidon2.hashGroup(input))).toStrictEqual(
        6606907947638360288904509414098984744535886081927742095024966421013465822781n
      );
      expect(
        FM.pointToX(FM.poseidon4.hashGroup(input))).toStrictEqual(
        4872559436837339531423278018765680077613922882527024830178608766773508225577n
      );
      expect(
        FM.pointToX(FM.poseidon8.hashGroup(input))).toStrictEqual(
        1338452971656506346196482611929193223032409114722103525334403207715501086738n
      );
    });
    it('hash: input=4', ()=>{
      const FM = new FieldMath();
      const input = [
        6901184695964460143517399399785179769303979738604374595034454667750561389951n,
        4569986992907167903298094880801044988451682407606958090985246015539197576880n,
        1659013762488693582855478522957329119959921484276233144739847127722099836592n,
        5873855434568679481242703448145783278614510745576299549051743569349492512978n,
      ];
      expect(
        FM.poseidon2.hash(input)).toStrictEqual(
        5077032915756006405056357976663159304886914340125619713231037384461532417432n
      );
      expect(
        FM.poseidon4.hash(input)).toStrictEqual(
        7634545961811588936484713301052408690645763622397315677026301158133701966262n
      );
      expect(
        FM.poseidon8.hash(input)).toStrictEqual(
        491310798299229303453029190751493384624125693265313448104421146921465784609n
      );
      // Scalar
      expect(
        FM.poseidon2.hashScalar(input)).toStrictEqual(
        1458530127089875298069764695141662184472227319324352086997987884214247116184n
      );
      expect(
        FM.poseidon4.hashScalar(input)).toStrictEqual(
        397540384479326722511526738009414449816389580794780424560202157639131363766n
      );
      expect(
        FM.poseidon8.hashScalar(input)).toStrictEqual(
        491310798299229303453029190751493384624125693265313448104421146921465784609n
      );
      // Many
      expect(FM.poseidon2.hashMany(input, 2)).toStrictEqual( [
        5077032915756006405056357976663159304886914340125619713231037384461532417432n,
        7556882202382565798668668067123114920984638418911135511310139766017967865048n,
      ]);
      expect(FM.poseidon4.hashMany(input, 2)).toStrictEqual( [
        7634545961811588936484713301052408690645763622397315677026301158133701966262n,
        6897041872403455461974187270360400367782809654597486212257448618986966168076n,
      ]);
      expect(FM.poseidon8.hashMany(input, 2)).toStrictEqual( [
        491310798299229303453029190751493384624125693265313448104421146921465784609n,
        476244868544635089532724552855423418881253978175875838088194622836984800804n,
      ]);
      // Group
      expect(
        FM.pointToX(FM.poseidon2.hashGroup(input))).toStrictEqual(
        6725009305095024168741689761204333975914699402177819232581771014527031061395n
      );
      expect(
        FM.pointToX(FM.poseidon4.hashGroup(input))).toStrictEqual(
        3501730277828187397862093302382961412852320364543135222391952713144715771762n
      );
      expect(
        FM.pointToX(FM.poseidon8.hashGroup(input))).toStrictEqual(
        7639970001763982540831449531477540915761314714085721616177080725803487493174n
      );
    });
    it('hash: input=8', ()=>{
      const FM = new FieldMath();
      const input = [
        6901184695964460143517399399785179769303979738604374595034454667750561389951n,
        4569986992907167903298094880801044988451682407606958090985246015539197576880n,
        1659013762488693582855478522957329119959921484276233144739847127722099836592n,
        5873855434568679481242703448145783278614510745576299549051743569349492512978n,
        8126778056340108742720298710864854335340160587591670858399923536543205675034n,
        7146400424093292796305326969877508376475248301146079897262686723570477471481n,
        4313136198840596462591029581810482612339281338296848099835538102215716458507n,
        6282620155184535925059193831765937196673297460411024331501133151513540140819n,
      ];
      expect(
        FM.poseidon2.hash(input)).toStrictEqual(
        6594437563703654534186397529184113205293233030058262272340335391616436192989n
      );
      expect(
        FM.poseidon4.hash(input)).toStrictEqual(
        704742938040415895240747757761079480327283873360760971154925333068091717503n
      );
      expect(
        FM.poseidon8.hash(input)).toStrictEqual(
        991393167967700343481483842400449404701980797732303235194119417895024779362n
      );
      // Scalar
      expect(
        FM.poseidon2.hashScalar(input)).toStrictEqual(
        1166683380704457873706507606901867524671202498856360832990761141245508241117n
      );
      expect(
        FM.poseidon4.hashScalar(input)).toStrictEqual(
        704742938040415895240747757761079480327283873360760971154925333068091717503n
      );
      expect(
        FM.poseidon8.hashScalar(input)).toStrictEqual(
        991393167967700343481483842400449404701980797732303235194119417895024779362n
      );
      // Many
      expect(FM.poseidon2.hashMany(input, 2)).toStrictEqual( [
        6594437563703654534186397529184113205293233030058262272340335391616436192989n,
        5829311790801476004249324679101691718602381296964675592530747038042070764198n,
      ]);
      expect(FM.poseidon4.hashMany(input, 2)).toStrictEqual( [
        704742938040415895240747757761079480327283873360760971154925333068091717503n,
        4248715102143237592247078376447090989539670133183034310727315972228894527936n,
      ]);
      expect(FM.poseidon8.hashMany(input, 2)).toStrictEqual( [
        991393167967700343481483842400449404701980797732303235194119417895024779362n,
        1945149102890670549657046595056836874240662020123768407531641032778955407553n,
      ]);
      // Group
      expect(
        FM.pointToX(FM.poseidon2.hashGroup(input))).toStrictEqual(
        6366159908386526803382156581274617464278814700114219190363099393824023037906n
      );
      expect(
        FM.pointToX(FM.poseidon4.hashGroup(input))).toStrictEqual(
        233091932302459314451004277769320733425634267195758106885254795665811958297n
      );
      expect(
        FM.pointToX(FM.poseidon8.hashGroup(input))).toStrictEqual(
        4980464100095906040713564953343028299550372790349795901966723508721380744789n
      );
    });
    it('hash: input=16', ()=>{
      const FM = new FieldMath();
      const input = [
        6901184695964460143517399399785179769303979738604374595034454667750561389951n,
        4569986992907167903298094880801044988451682407606958090985246015539197576880n,
        1659013762488693582855478522957329119959921484276233144739847127722099836592n,
        5873855434568679481242703448145783278614510745576299549051743569349492512978n,
        8126778056340108742720298710864854335340160587591670858399923536543205675034n,
        7146400424093292796305326969877508376475248301146079897262686723570477471481n,
        4313136198840596462591029581810482612339281338296848099835538102215716458507n,
        6282620155184535925059193831765937196673297460411024331501133151513540140819n,
        6597920243748409798680827252355049105155364422260244932071589093186562968361n,
        3605359666769156817416648782326955441017464751938294607500273067866418228235n,
        2625728530241398560175748290708021912353381105350291086352008839138852733488n,
        821590286567312489618619767524482845252939436723016263917937002701599860899n,
        2538937507626829036523198286588894730275361619132895610264188005413801268628n,
        6094463340886331104288430936657421031897808800105288685834715360921562720721n,
        4813517148179615476572880733923100857095118506834581224591783003032375372749n,
        7909748132681753639886263054263449719810576140429527291243641369672483751710n
      ];
      expect(
        FM.poseidon2.hash(input)).toStrictEqual(
        2653707815105772452907847426958456137480828720104705412316177047406200842914n
      );
      expect(
        FM.poseidon4.hash(input)).toStrictEqual(
        2939151186109617767124953585133544543322683605150703664787277880696669540747n
      );
      expect(
        FM.poseidon8.hash(input)).toStrictEqual(
        1692180063843635677983354076725029307310120391887844710322650123216035005300n
      );
      // Scalar
      expect(
        FM.poseidon2.hashScalar(input)).toStrictEqual(
        844456420772706899414550786197707577273485209704071599199652297282558192290n
      );
      expect(
        FM.poseidon4.hashScalar(input)).toStrictEqual(
        1129899791776552213631656944372795983115340094750069851670753130573026890123n
      );
      expect(
        FM.poseidon8.hashScalar(input)).toStrictEqual(
        1692180063843635677983354076725029307310120391887844710322650123216035005300n
      );
      // Many
      expect(FM.poseidon2.hashMany(input, 2)).toStrictEqual( [
        2653707815105772452907847426958456137480828720104705412316177047406200842914n,
        2145720041472403103167742043529622193045723082585838876351546430994968184476n,
      ]);
      expect(FM.poseidon4.hashMany(input, 2)).toStrictEqual( [
        2939151186109617767124953585133544543322683605150703664787277880696669540747n,
        3567222860147188505859869401988966190284657404073785626715886600681431358177n,
      ]);
      expect(FM.poseidon8.hashMany(input, 2)).toStrictEqual( [
        1692180063843635677983354076725029307310120391887844710322650123216035005300n,
        1151081151783236534723676512591911257048225713190832748851210004910833711585n,
      ]);
      // Group
      expect(
        FM.pointToX(FM.poseidon2.hashGroup(input))).toStrictEqual(
        746253985386693652886551785171219091000406057949668362490758487147806280128n
      );
      expect(
        FM.pointToX(FM.poseidon4.hashGroup(input))).toStrictEqual(
        4821108931437876391136835223381659141255950403763111187438128083551468394371n
      );
      expect(
        FM.pointToX(FM.poseidon8.hashGroup(input))).toStrictEqual(
        5839348219329480289053417200051913514147996673671485072902001314392111370415n
      );
    });
    it('hash: input=3 (basic)', ()=>{
      const FM = new FieldMath();
      const input = [
        6901184695964460143517399399785179769303979738604374595034454667750561389951n,
        4569986992907167903298094880801044988451682407606958090985246015539197576880n,
        1659013762488693582855478522957329119959921484276233144739847127722099836592n,
      ];
      expect(
        FM.poseidon2.hash(input)).toStrictEqual(
        1805410408650841090923972420606532829941637291884550707088740646192372789648n
      );
      expect(
        FM.poseidon4.hash(input)).toStrictEqual(
        5859843717150976458627699923274130604746597863047612200375746972033604964846n
      );
      expect(
        FM.poseidon8.hash(input)).toStrictEqual(
        6539292206440031484446914535919313471254950092382154174556783979973889128857n
      );

      expect(FM.poseidon2.hashMany(input, 2)).toStrictEqual( [
        1805410408650841090923972420606532829941637291884550707088740646192372789648n,
        691253556106770039043570506994029665283307299005951148467229234821774235552n,
      ]);
      expect(FM.poseidon4.hashMany(input, 2)).toStrictEqual( [
        5859843717150976458627699923274130604746597863047612200375746972033604964846n,
        7575181600685923415136204028363179377387266473039814207855616518963148864727n,
      ]);
      expect(FM.poseidon8.hashMany(input, 2)).toStrictEqual( [
        6539292206440031484446914535919313471254950092382154174556783979973889128857n,
        1803364475302298272859016174344903563590127639589915442266124899402256683504n,
      ]);
    });
    it('hash: input=7 (basic)', ()=>{
      const FM = new FieldMath();
      const input = [
        6901184695964460143517399399785179769303979738604374595034454667750561389951n,
        4569986992907167903298094880801044988451682407606958090985246015539197576880n,
        1659013762488693582855478522957329119959921484276233144739847127722099836592n,
        5873855434568679481242703448145783278614510745576299549051743569349492512978n,
        8126778056340108742720298710864854335340160587591670858399923536543205675034n,
        7146400424093292796305326969877508376475248301146079897262686723570477471481n,
        4313136198840596462591029581810482612339281338296848099835538102215716458507n,
      ];
      expect(
        FM.poseidon2.hash(input)).toStrictEqual(
        6370425049615521258494489697511393502291061821582070875239659783735231915335n
      );
      expect(
        FM.poseidon4.hash(input)).toStrictEqual(
        2618623640075571733228356368126531922348993661029232555924126300974266219771n
      );
      expect(
        FM.poseidon8.hash(input)).toStrictEqual(
        2124989346978343777968312649529933489500099023943827939351937152576639621166n
      );

      expect(FM.poseidon2.hashMany(input, 2)).toStrictEqual(  [
        6370425049615521258494489697511393502291061821582070875239659783735231915335n,
        4148780162474140823068196094713998724942507063922293506137362575982348314451n,
      ]);
      expect(FM.poseidon4.hashMany(input, 2)).toStrictEqual(  [
        2618623640075571733228356368126531922348993661029232555924126300974266219771n,
        6840129449815770291327099168420908769992387940839817935805559093548751181489n,
      ]);
      expect(FM.poseidon8.hashMany(input, 2)).toStrictEqual(  [
        2124989346978343777968312649529933489500099023943827939351937152576639621166n,
        3004085598367988567371505286753053897386864464778220947694355962194792387513n,
      ]);
    });
    it('hash: input=15 (basic)', ()=>{
      const FM = new FieldMath();
      const input = [
        6901184695964460143517399399785179769303979738604374595034454667750561389951n,
        4569986992907167903298094880801044988451682407606958090985246015539197576880n,
        1659013762488693582855478522957329119959921484276233144739847127722099836592n,
        5873855434568679481242703448145783278614510745576299549051743569349492512978n,
        8126778056340108742720298710864854335340160587591670858399923536543205675034n,
        7146400424093292796305326969877508376475248301146079897262686723570477471481n,
        4313136198840596462591029581810482612339281338296848099835538102215716458507n,
        6282620155184535925059193831765937196673297460411024331501133151513540140819n,
        6597920243748409798680827252355049105155364422260244932071589093186562968361n,
        3605359666769156817416648782326955441017464751938294607500273067866418228235n,
        2625728530241398560175748290708021912353381105350291086352008839138852733488n,
        821590286567312489618619767524482845252939436723016263917937002701599860899n,
        2538937507626829036523198286588894730275361619132895610264188005413801268628n,
        6094463340886331104288430936657421031897808800105288685834715360921562720721n,
        4813517148179615476572880733923100857095118506834581224591783003032375372749n,
      ];

      expect(
        FM.poseidon2.hash(input)).toStrictEqual(
        1369947358756742191392278642261916130939820328484619624244909648503718232317n
      );
      expect(
        FM.poseidon4.hash(input)).toStrictEqual(
        5036522892560406127196067213032387335968128267116415015398809816352363237983n
      );
      expect(
        FM.poseidon8.hash(input)).toStrictEqual(
        7256975868445513838136534131957370946922568356776254742279199860697650254172n
      );
      expect(FM.poseidon2.hashMany(input, 2)).toStrictEqual( [
        1369947358756742191392278642261916130939820328484619624244909648503718232317n,
        7499272376562416517285573973687896113490705919729714828099997040466771222368n,
      ]);
      expect(FM.poseidon4.hashMany(input, 2)).toStrictEqual( [
        5036522892560406127196067213032387335968128267116415015398809816352363237983n,
        5993527109741059171879296648939894263836781880346753593678733160762435109115n,
      ]);
      expect(FM.poseidon8.hashMany(input, 2)).toStrictEqual( [
        7256975868445513838136534131957370946922568356776254742279199860697650254172n,
        2560040967585119375868013526543162577852547172623923519938670406788778651729n,
      ]);
    });
    it('mds strings', ()=>{
      const FM = new FieldMath();
      expect(
        FM.poseidon8.mds).toStrictEqual(
        aleoMdStrings.map((row) => row.map((elm) => BigInt(elm))),
      );
      expect(
        FM.poseidon8.roundConstants).toStrictEqual(
        aleoRoundConstantStrings.map((row) => row.map((elm) => BigInt(elm))),
      );
    });
    it('hash input=2, output=15', ()=>{
      const FM = new FieldMath();
      const input = [
        6901184695964460143517399399785179769303979738604374595034454667750561389951n,
        4569986992907167903298094880801044988451682407606958090985246015539197576880n,
      ];
      expect(FM.poseidon2.hashMany(input, 15)).toStrictEqual( [
        103425943716865137346152431339937911572438811996215452353663206824446841498n, 3545210811159819442056413892427281354557556701718002344560119017328682972521n, 2618445767719346223321388451774573352189829696144248312828040045159867414482n, 2814483104054827794016351898492027829159051249923741541468416833314243068969n, 5888752490895964935210885123848775783921308950564033709008273158096691681674n, 4122878661045475583973041664456533088203194806192441374120084453255128655624n, 2265027454647734255955623592825782863223923618358287065248587239323889865241n, 5201221018606899338831245838693551812662345755109105603009759841926956311611n, 1240889957427247573399668425887489200910363277994308623675992194241110214815n, 7889586472754495657660937660726779754658992292451988762449759194365299925677n, 2779661452890607809460783515421189781322978012957881971351328002626864393909n, 4820405748379173441267357599803951438694328953656704437820529621577525510932n, 3341271899840148126365943822779093067033381849293553914237994538922191801352n, 7412180805826157434609980534495073750360018717982181505743649182511394807571n, 661516737309539019728362302451779338347052967592740094218468767457275389691n
      ]);
    })
  });
});
