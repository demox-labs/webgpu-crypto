// import { BLS, G1 } from "@celo/bls12377js";
import { CurveFn, twistedEdwards } from "@noble/curves/abstract/edwards";
import { sha512 } from '@noble/hashes/sha512';
import { poseidon, PoseidonOpts } from '@noble/curves/abstract/poseidon';
import { Field } from "@noble/curves/abstract/modular";
import { randomBytes } from "crypto";

// export const multiply = (nonce: string, scalar: string): string => {
//   const twistedEdwards = new eddsa('ed25519');
//   const fieldElement = new BN(nonce, 16, 'le');
//   const scalarElement = new BN(scalar, 16,'le');
//   const groupElementOdd = twistedEdwards.curve.pointFromX(fieldElement, true);
//   const result = groupElementOdd.mul(scalarElement);
//   return result.getX().toString();
// }

// export const convertFieldBytesToGroup = (fieldBytes: Uint8Array): G1 => {
//   const g1 = BLS.decompressG1(Buffer.from(fieldBytes));
//   // const g2 = BLS.decompressG2(Buffer.from(fieldBytes));
//   return g1;
// };

// export const convertXCoordinateToGroupElement = (xCoordinateField: string): curve.base.BasePoint  => {
//   const twistedEdwards = new eddsa('ed25519');
//   const xCoordinateBN = new BN(xCoordinateField, 16, 'le');
//   const groupElementOdd = twistedEdwards.curve.pointFromX(xCoordinateBN, true);
//   const groupElementEven = twistedEdwards.curve.pointFromX(xCoordinateBN, false);

//   const characteristic = twistedEdwards.curve.n;
//   const multipliedOddPoint = groupElementOdd.mul(characteristic);
//   // don't know how this works, don't care
//   if (multipliedOddPoint.isInfinity()) {
//     return groupElementOdd;
//   } else {
//     return groupElementEven;
//   }
// }


export const multiply = (nonce_x: string, nonce_y: string, scalar: string): { x: BigInt, y: BigInt } => {
  // Convert the scalar and point to BigInt
  const bigIntScalar = BigInt(scalar,);
  const bigIntPointX = BigInt(nonce_x);
  const bigIntPointY = BigInt(nonce_y);
  // Get the curve point in extended coordinates
  const aleoEdwards = customEdwards();
  const point = aleoEdwards.ExtendedPoint.fromAffine({ x: bigIntPointX, y: bigIntPointY });

  // Perform scalar multiplication
  // const result = point.multiply(bigIntScalar);
  const unsafeResult = point.multiplyUnsafe(bigIntScalar);

  // Convert the result to affine coordinates
  // const resultAffine = result.toAffine();
  // faster, but leaks info about the underlying data
  const unsafeResultAffine = unsafeResult.toAffine();

  return unsafeResultAffine;
}

const encryptionDomain = BigInt('1187534166381405136191308758137566032926460981470575291457');
const poseidonDomain = BigInt('4470955116825994810352013241409');
const aleoMds = [[6093452032963406658309134825240609333033222270199073508119142384975416392638, 5968273173562867837210008744966745230923761158428968101807573098840850097286, 1100466639266852149977689148055725793531897994956807001704693611715839541982], [3160983601532844171864802850648492289862147997874094785600836495095965353712, 2338351297827692414112631814274572996809824929139580588221558887342663769892, 3177005087903404343485399282920555615020488967881372266904325860698809358885], [2285176219817854683696635383059984246218458246545520061123961933072089703485, 84377861777946561525373172505381054389617879929776365352216307785104476701, 8280884008678095605415834125731826663585461281789631237939546251146561093166]];
const aleoMdsAsBigInts = aleoMds.map(row => row.map(BigInt));
const aleoRoundConstants = [[1370773116404421539888881648821194629032979299946048429076387284005101684675, 4673035637825817609038514733539555185313791666023633961663352080665830654830, 3476986714632640194314485873881082667866912997891863048915892042674874286264], [1082495278266482754833562621758308632581366365108718780801560341752506567697, 4949432510532674124503328437030614426007112126335799011165573383397503068558, 1330731268421256836250705136567442317504087954921291231955447229193812596308], [2649505161225663922316999879032136225486779063673300240621719420078616600331, 4969420587703679612645522006695883166296724515300508402438681500077273342102, 205635712587803026777585519450868615715404988831679984758308345484658244699], [6145772648854219628629735661952781083869402744236565775495743574991105198727, 5694971131555029816374722311330556638260056256238039903705739439184187043937, 5741725876337992913741719090196370235271299497940404104226910654118627348231], [6469638413629030129780219709477213488269112947492045389237429028620220258446, 3701595212702118832843766258638566924918883592466668319824165091176624488470, 3788264172113320071929375505654410621672880197708720070568683533593741188367], [7440115096888436553805393179190448787187286166192882400220572931865568317182, 792346028642694686435936057983036575794551345818605100013220351237266490211, 3512073197867644095949820682768614757198377867832806840119595329029395413419], [3327088580126882425803902509250293076948968718390152099056814690231480975540, 7158369207426751973498757672315193862013926247640641608613447343948389969907, 6576114422707630183258306285876174832535448513519868242206479550748199028650], [1750441329216804285131573838407988974537000108919914117251383215390240334007, 6643642586767682146943021170325866479407987761019956931934065669737733844970, 4106833857706706417652949425395842926674588555313556065852954705212767334548], [5196247641080157421214976259470019902011109253162446920598369271583914387912, 6360624992789526556614108772011303405529807087502693775123890278812066474754, 8425833359837698797187325575646708254811496588866812335451071326764069753553], [7571765444928048488636382364785227388831860339901373587410494373985769122100, 1146560176939543249528183531911179059346379826648787355971780563762045417939, 7065673187452873657602174269205792331276819829797382751854008973390840650347], [2996886232144394882237600400269759049381836612341075168714674419715424495381, 7668744387648470169368229696434415530109096020857128629089289952099341334341, 936627698981026919732496023789041288394375500602254911470718843646602645053], [6199749224785668013863210092063343076018531979597999604829468825162260274190, 1653132234679858820482383205271489733007453315887823778464537322543673289375, 7939359542319254103812635759696217625861967838748888560647186882218141754398], [5250147394211818178524181700154433748053992647055590962793825894928645733326, 235902753941634492088451291363018081809625358810315316265161104829935550542, 6608963137139961850002639926351347514621255004982055637993898513250013620207], [686840635267965663175276645211808051025823527505028096239338481540935993835, 6836915689880452140045500520891176609600850753468429607484223074627863622754, 4411311036661487117682008390277121256586135166845650218368031395328640568455], [7765580651637884064091086941299831107821005732883926779656422881469118342677, 332549754384827539552516583331436482626027168628972328124682073094327566178, 8438579169602499403531276834153862236681805902767396281885988675130427183942], [4371224392051444141538216717830171873522813314722974453159288159086172590441, 4471819188266525256545603690402039960553559029943278641513107103995534212653, 7934285249368611074358220926618133755594116808280441387064776330233673680433], [3296929004083914338419828203502973195235748568216135964056267831058260996338, 7828705062628438916991665037339807083733865061668384262916273779860279371794, 6313358380505257639005175768394745400256528068580776946435054333930810425918], [7673091158517942236320201239127705985446414040558434294512441355493079388101, 3589839431787481799335476281766961640592432750884680804513596535388211513959, 3497309798506406648010286927425548038594271991920637549888387014860982947288], [3598928531842189258027744661377220155690961099878644839237443661252156892627, 8323476545439527339398168929351847585459351691146904838200536423836775797722, 2525233425021205371462807301191193452372106809085080242885832543937723343824], [1670123541208150697178760793866430341950571765422973242642698972122650175931, 2615994352824306042392204336460002628039562926557752567316988279659549764738, 3845612285742795068547496524855308821681721826554794539870518271238257264872], [8111729937113136682593516470591971173110681064547090000686075778488505769131, 8396009887088699712099390488777898295472002649026341742255474271675851100167, 7414449034416524223782013238252312102346828190465700203171291370882467344947], [3778308769422683143427677977866154704853508570989688082271648398982585170107, 2565370813801956884760401215151019368813258954878221563399238313359761598300, 7277843344904687178893605017520459777796065293383180828267621160222576167983], [6533305346353864830435743885484797433819452357103761181561861553139604158691, 7023616807188225486961828699414844137821383541366139971758751915067616890468, 6455936034448761051686329703810283225146169133435552271890713431685063292826], [2781819771186595572605878483518345975589831093852202671865373784050027047498, 7768920898267371999735782676903681841500678447293607126814923973294043875457, 6463549363657422809088424260159871142005366302883731565233242485772646214776], [4269033939844383336636476360431731618619965524039119758847937142713481376709, 5618036788017776315188246458501777138795420885496187406031735668173200947333, 1128431213282240763420656004648057492974288942591424362188971631793337713791], [6900739195883338461228609955335408882714240356250551921341894223851444718631, 3771335365721990684607605930021444592509300370948450043449389607062564762590, 4101659620264578558029808267598816776989279597141521237379858078563415422176], [7265965499850925058171553371274334440963706378337393611300731052328159723420, 4766078774636290635629565607286497839044156826339894416138410680627572132174, 6432220484581857509344049161489739648526811837695982886809250552529276108059], [6361365189519422980433504384140223138978192212838226387265114914908491362931, 7610377774980016354219333532677870219839779550900332138169496134065793623856, 363180943030113865942993953461474483659264066502549823448101062593623940092], [3562244767885763851343292605940116818317029725206904934994049890929589055395, 7782549227482772885045540707357099585281118980712854335622177919009966444948, 1275552603578693917501370061277948491143012995771911804618466157236333967239], [5104148721380689096094143534135757186465840305075873333902995773940524349076, 3827555903928560008785730325772720209567461775844698712063218244346202837926, 6537952092752701292661689328736100739363623229800800023575262375504637794811], [2625555787287768315537311869809801184270047957788564515280996906803464172085, 2268046926631224821219360422346148209575446526490776085639666316914303207343, 8301985790233975096406293902798523168400755923104779849614021896827941122062], [6186410907907226666421909877388154922245464592386712702411681535145025981542, 1570197114753247526703806268420919303949793186535455032181860083077073573260, 6433616921731463425493337442585921501113569311931762833956390491384184622184], [3730715929874541583946502538607860277000019933547155277889700636306045698678, 4162712607911623590542516061947062496983700183068013598513127619182396118738, 4885581468925689451043482261642022591161185334411569876922526171563347772487], [679010986662603253067780482929422410547319947222192616893132766589997651700, 7045332371454775389874918027434858274122123892961682451412342124928285105115, 796483939088841221822094384379289433804847199444006131260701274900329521826], [6930777873598706215302735286927888271122111082058406024378887982572264481712, 3833261336312955683233981899122259611841384124139797023838966596495768744423, 6081952172694136481884686958014712088378824178559544670607383857565862846284], [3816381396460078181431529965953560061945407168453302734314638292833792891390, 56734387980297685686110088096585973744605712015961903089771968507489169889, 1528381975769046861077120384272922840572114805411576866912148437940560430592], [4051427337822729290390706006634045761150954597129823553613464074823819976689, 928801883926308717594921627141285880564599719525707838888160095066522021660, 2575814441780474908465005749689528467553680700052052921662671958906858409792], [4188482005041843983756841875722811236284873807578170011114849822278345286775, 2055640774204777367415844703991682482137697203553277498227758201416424138567, 4575553062307433825409075011087260276527850105624870927391350382554634786094], [1854996916655462786356197865726500413712215270951193953965916926815164398288, 4106990062567081635175461840146829007165341060131472749713325730182145598945, 4440684113159162228103294475409844107272920293202271745070427054893404635089]];
const aleoRoundConstantsAsBigInts = aleoRoundConstants.map(row => row.map(BigInt));

export const poseidonHash = (recordViewKey: string, expectedResult: string): string => {
  const recordViewKeyBigInt = BigInt(recordViewKey);
  const expectedResultBigInt = BigInt(expectedResult);
  const aleoPoseidonOpts: PoseidonOpts = {
    Fp,
    // does this correspond to alpha?
    t: 3,
    roundsFull: 8,
    roundsPartial: 31,
    sboxPower: 17,
    mds: aleoMdsAsBigInts,
    roundConstants: aleoRoundConstantsAsBigInts
  };

  const inputPermutations = [
    [recordViewKeyBigInt, encryptionDomain, poseidonDomain],
    [recordViewKeyBigInt, poseidonDomain, encryptionDomain],
    [encryptionDomain, recordViewKeyBigInt, poseidonDomain],
    [encryptionDomain, poseidonDomain, recordViewKeyBigInt],
    [poseidonDomain, recordViewKeyBigInt, encryptionDomain],
    [poseidonDomain, encryptionDomain, recordViewKeyBigInt]
  ];

  const aleoPoseidon = poseidon(aleoPoseidonOpts);
  // inputPermutations.forEach(p => {
  //   const result = aleoPoseidon(p);
  //   if (result.includes(expectedResultBigInt)) {
  //     return result[0].toString();
  //   } else {
  //     console.log('nope');
  //   }
  // });
  return aleoPoseidon([poseidonDomain, BigInt(2), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), encryptionDomain, recordViewKeyBigInt]).toString();
}

function adjustScalarBytes(bytes: Uint8Array): Uint8Array {
  // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,
  // set the three least significant bits of the first byte
  bytes[0] &= 248; // 0b1111_1000
  // and the most significant bit of the last to zero,
  bytes[31] &= 127; // 0b0111_1111
  // set the second most significant bit of the last byte to 1
  bytes[31] |= 64; // 0b0100_0000
  return bytes;
}

function uvRatio(u: bigint, v: bigint): { isValid: boolean; value: bigint } {
  // pray that this is not used
  throw new Error('Not implemented');
}

// base field modulus https://docs.rs/ark-ed-on-bls12-377/latest/ark_ed_on_bls12_377/
const aleoFieldOrder = BigInt('8444461749428370424248824938781546531375899335154063827935233455917409239041');

// printed out the Edwards_a coefficient
const aleoA = BigInt('8444461749428370424248824938781546531375899335154063827935233455917409239040');
// printed out the edwards_d coefficient
const aleoD = BigInt('3021');
// https://github.com/AleoHQ/snarkVM/blob/testnet3/curves/src/edwards_bls12/parameters.rs#L45
const aleoCofactor = BigInt(4);
// big int representations of https://github.com/AleoHQ/snarkVM/blob/testnet3/curves/src/edwards_bls12/parameters.rs#L43
const aleoGeneratorX = BigInt('1540945439182663264862696551825005342995406165131907382295858612069623286213');
const aleoGeneratorY = BigInt('8003546896475222703853313610036801932325312921786952001586936882361378122196');
const Fp = Field(aleoFieldOrder, undefined, true);

const customEdwards = (): CurveFn => {
  const aleoDef = {
    // Param: a
    a: aleoA,
    // Equal to -121665/121666 over finite field.
    // Negative number is P - number, and division is invert(number, P)
    d: aleoD,
    // Finite field 𝔽p over which we'll do calculations; 2n ** 255n - 19n
    Fp,
    // Subgroup order: how many points ed25519 has
    // 2n ** 252n + 27742317777372353535851937790883648493n;
    // not taken from aleo, don't know what this is
    n: BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989'),
    // Cofactor
    h: aleoCofactor,
    // Base point (x, y) aka generator point
    Gx: aleoGeneratorX,
    Gy: aleoGeneratorY,
    hash: sha512,
    // pray we don't need this
    randomBytes: (randomBytes as any),
    // or this
    adjustScalarBytes,
    // dom2
    // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.
    // Constant-time, u/√v
    uvRatio,
  } as const;

  return twistedEdwards(aleoDef)
}