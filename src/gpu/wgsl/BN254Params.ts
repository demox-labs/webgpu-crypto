export const BN254ParamsWGSL =
`
// 21888242871839275222246405745257275088696311157297823662689037894645226208583
const FIELD_ORDER: Field = Field(
    array<u32, 8>(811880050, 3778125865, 3092268470, 2172737629, 2541841041, 1752287885, 1008765974, 3632069959)
);

// 21888242871839275222246405745257275088696311157297823662689037894645226208584
const FIELD_ORDER_PLUS_ONE: Field = Field(
  array<u32, 8>(811880050, 3778125865, 3092268470, 2172737629, 2541841041, 1752287885, 1008765974, 3632069960)
);

// 21888242871839275222246405745257275088696311157297823662689037894645226208582
const FIELD_ORDER_MINUS_ONE: Field = Field(
  array<u32, 8>(811880050, 3778125865, 3092268470, 2172737629, 2541841041, 1752287885, 1008765974, 3632069958)
);

// 21888242871839275222246405745257275088696311157297823662689037894645226208583
const p: Field = FIELD_ORDER;
// 5472060717959818805561601436314318772174077789324455915672259473661306552146
const p_plus_one_div_4: Field = Field(
  array<u32, 8>(202970012, 3092015114, 1846808941, 2690668055, 1709202084, 1511813795, 1325933317, 3055501138)
);

// assumes that num is indeed a square root residue.
// follows the Shanks Tonelli algorithm. View shankstonelli.ts for the non-shortened version.
fn field_sqrt(num: Field) -> Field {
  return field_pow(num, p_plus_one_div_4);
}
`;